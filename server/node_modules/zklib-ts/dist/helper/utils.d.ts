import { User } from '../models/User';
import { Attendance } from "../models/Attendance";
export interface DeviceInfo {
    userCounts: number;
    logCounts: number;
    logCapacity: number;
}
export type UserData28 = Omit<User, 'password' | 'group_id' | 'card' | 'repack29' | 'repack73'>;
export interface RecordData16 {
    record_time: Date;
    user_id: string;
    ip?: string;
}
export type RealTimeLog = RecordData16;
interface UDPHeader {
    commandId: number;
    checkSum: number;
    sessionId: number;
    replyId: number;
}
interface TCPHeader extends UDPHeader {
    payloadSize: number;
}
export declare const createUDPHeader: (command: number, sessionId: number, replyId: number, data: any) => Buffer;
export declare const createTCPHeader: (command: number, sessionId: number, replyId: number, data: any) => Buffer;
export declare const removeTcpHeader: (buf: Buffer) => Buffer;
export declare const parseTimeToDate: (time: number) => Date;
export declare const decodeUserData28: (userData: Buffer) => UserData28;
export declare const decodeUserData72: (userData: Buffer) => User;
export declare const decodeRecordData40: (recordData: Buffer) => Attendance;
export declare const decodeRecordData16: (recordData: Buffer) => RecordData16;
export declare const decodeRecordRealTimeLog18: (recordData: Buffer) => RealTimeLog;
export declare const decodeRecordRealTimeLog52: (recordData: Buffer) => RealTimeLog;
export declare const decodeUDPHeader: (header: Buffer) => UDPHeader;
export declare const decodeTCPHeader: (header: Buffer) => TCPHeader;
export declare const exportErrorMessage: (commandValue: number) => string;
export declare const checkNotEventTCP: (data: Buffer) => boolean;
export declare const checkNotEventUDP: (data: Buffer) => boolean;
export declare const authKey: (comKey: number, sessionId: number) => number[];
export {};
